syntax _??_ 3 right;
let _??_(x,~y) = if x == null {y} else {x};

syntax _|_ -2 right;
let (f | g)(x) = f(x) ?? g(x);
syntax match_{|_} -3 right;
let match x { | f } = f(x);

syntax if_{_} 0;
let if x { ~e } = if x { e } else { null };

syntax _when_ 0;
let ~x when y = if y { x };

syntax case_._ -1 right;
syntax case_{_} 0;

syntax fun_._ -1 right;
macro fun P. X = fun(P) {X};
macro case P. X = fun P. X;
macro case P {X} = fun P. X;

syntax freeze_as_._ -1 right;
macro freeze P as Y. Z = ((fun (P) { Z })(Y));
