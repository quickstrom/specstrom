let conjunction = foldr(_&&_,true);
let disjunction = foldr(_||_,false);
let all(f,ls) = conjunction(map(f,ls));
let any(f,ls) = disjunction(map(f,ls));
syntax _??_ 3 right;
let _??_(x,y) = if x == null then y else x;
syntax _|_ -2 right;
syntax match_{_} -3 right;
let (f | g)(x) = f(x) ?? g(x);
let match x { f } = f(x);

action click!(x) = for element in x. { id: "click", event: false, args: [element.ref] } when element.enabled;

action changed?(x) = for element in x. { id: "changed", event: true, args: [x.ref]};

action loaded? = { id: "loaded", event: true, args: [] };

action noop! = {id:"noop",event:false,args:[]};

// bindings can take arguments.
let transition(a, b) = a && next b;

syntax _~>_ 5;
let a ~> b = transition(a, b);

let unchanged(x) = freeze a = x. next (x == a); 
