let conjunction = foldr(_&&_,true);
let disjunction = foldr(_||_,false);
let all(f,ls) = conjunction(map(f,ls));
let any(f,ls) = disjunction(map(f,ls));
syntax _??_ 3 right;
let _??_(x,y) = if x == null then y else x;
syntax _|_ -2 right;
syntax match__ -3 right;
let (f | g)(x) = f(x) ?? g(x);
let match x f = f(x);

action click!(x) = for element in x. #act("click",false,[element.ref],null) when element.enabled;

action changed?(x) = #act("changed",true,[x.ref],null);

action noop! = #act("noop",false,[],null);

// bindings can take arguments.
let transition(a, b) = a && next b;

syntax _~>_ 5;
let a ~> b = transition(a, b);

let unchanged(x) = freeze a = x. next (x == a); 
