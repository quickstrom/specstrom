// The following specifies a stripped-down audio player, featuring a
// button that toggles between the paused and playing states.

// States

let buttonText = `.play-pause`.textContent;

let timeDisplayText = `.time-display`.textContent;

let playing = buttonText == "Pause";

let paused = buttonText == "Play";

// Actions and events

let toggle! = click! `.toggle`;

let wait! = noop! await when playing;

let tick? = changed? `.time-display`;

// We can play while in the `paused` state.
let play =
      next action == toggle!
      && paused ~> playing
      && unchanged timeDisplayText;

// We can pause while in the `playing` state.
let pause =
      next action == toggle!
      && playing ~> paused
      && unchanged timeDisplayText;

// The `tick` system event occurs when we're in `playing`, changing
// the time display's text
let tick =
      next action == tick?
      && playing ~> playing
      && not (unchanged timeDisplayText);

import test;
let prop_safety = paused && always (play || pause || tick);

check prop_* with *;
